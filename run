#!/bin/bash


PAKET="./.paket/paket.exe"
FAKE="packages/build/FAKE/tools/FAKE.exe"

EXAMPLES_PROJ="examples/Examples.fsproj"
TEST_PORJ="tests/Test.CryptoExchangeClient/Test.CryptoExchangeClient.fsproj"
SRC_PROJ="src/CryptoExchangeClient.fsproj"

function __run {

  # First arg
  given_command=$1
  # The rest of the args
  arguments=${@:2}

  # For Sub-command redirection
  sub_command=$2
  sub_arguments=${@:3}


  # For debugging
  echo "cmd:  $given_command"
  echo "args: $arguments"

  case $given_command in
    p)      ${PAKET} $arguments;;
    dn)     dotnet $arguments;;
    paket)  ${PAKET} $arguments;;
    fake)   ${FAKE} $arguments Fake.fsx;;

    examples:build) dotnet build -f ${EXAMPLES_PROJ};;
    examples:restore) dotnet restore -f ${EXAMPLES_PROJ};;
    examples) dotnet run -p ${EXAMPLES_PROJ};;

    test) dotnet test ${TEST_PROJ};;
    test:restore) dotnet restore ${TEST_PROJ} --verbosity m;;

    lib:restore) dotnet restore ${SRC_PROJ} --verbosity m;;


    clean:all)
      # Don't name any folders bin or obj
      rm -rf **/bin/ && \
      rm -rf **/obj
    ;;

    release)
      local version=$(sed -n 's:.*<Version>\(.*\)</Version>.*:\1:p' src/CryptoExchangeClient.fsproj)

      echo ""
      echo "Releasing v. $version"
      echo ""

      dotnet pack src/CryptoExchangeClient.fsproj && \
      dotnet nuget push src/bin/Debug/CryptoExchangeClient.$version.nupkg \
        -k $NUGET_KEY \
        -s https://api.nuget.org/v3/index.json
    ;;

    *)
      echo "command not recognized: $@"
  esac
}

# Also allow non-sourced running
if [ $1 ]; then
  __run $*
fi
